# Run 5 instances of that image as a service called web, limiting each one to use, 
# at most, 10% of the CPU (across all cores), and 50MB of RAM.
# Set the Compose file to version: "3" to make it swarm mode compatible. 
version: "3"
services:
  web:
    image: slondono/labs:docker-image-lab-v0.1
    deploy:
      replicas: 5
      resources:
        limits:
          cpus: "0.1"
          memory: 50M
      restart_policy:
        condition: on-failure
    # Instruct web’s containers to share port 80 via a load-balanced network called 
    # webnet. (Internally, the containers themselves will publish to web’s port 80 at an ephemeral port.)
    ports:
      - "80:80"
    networks:
      - webnet
  # Visualizer service: displays Docker services running on a swarm in a diagram
  visualizer:
    image: dockersamples/visualizer:stable
    ports:
      - "8080:8080"
    # Give the Visualizer access to the host's socket file for Docker
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    deploy:
      # Ensure that the service only ever runs on a swarm manager, never a worker
      placement:
        constraints: [node.role == manager]
    networks:
      - webnet
  # Redis database service for storing app data
  redis:
    image: redis
    ports:
      - "6379:6379"
    # Store Redis data at the /home/docker/data directory of the node's filesystem
    volumes:
      - /home/docker/data:/data
    deploy:
      # Make sure that the Redis container runs on the manager only, as data will be stored in its filesystem
      placement:
        constraints: [node.role == manager]
    command: redis-server --appendonly yes
    networks:
      - webnet  
# Define the webnet network with the default settings (which is a load-balanced overlay network).
networks:
  webnet: